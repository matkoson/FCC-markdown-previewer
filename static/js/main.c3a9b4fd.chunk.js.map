{"version":3,"sources":["CodeInput.js","PreviewWindow.js","App.js","serviceWorker.js","index.js"],"names":["CodeInput","props","_this","this","fullScreen","react_default","a","createElement","className","concat","id","onClick","e","arrowHandler","defaultValue","onChange","event","inputHandler","target","value","Component","PreviewWindow","state","_this2","dangerouslySetInnerHTML","__html","parsedInput","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputValue","handleTextareaInput","bind","assertThisInitialized","handleArrowClick","setState","marked","input","parsed","String","src_CodeInput","src_PreviewWindow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3a9b4fd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nclass CodeInput extends Component {\n  render(props) {\n    let fullScreen = this.props.fullScreen ? this.props.fullScreen : null;\n    return (\n      <div className={`code-input border-shadow-black ${fullScreen}`}>\n        <div className=\"window-title \">\n          <div className=\"window-title-logo\">\n            <i className=\"fa fa-fire\" />\n            <h2>Editor</h2>\n          </div>\n          <div className=\"window-title-arrows\">\n            <i\n              id=\"arrow-input\"\n              className=\"fa fa-arrows-alt\"\n              onClick={e => this.props.arrowHandler(e)}\n            />\n          </div>\n        </div>\n        <textarea\n          id=\"editor\"\n          className=\"code-input__input\"\n          defaultValue={this.props.defaultValue}\n          onChange={event => this.props.inputHandler(event.target.value)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CodeInput;\n","import React, { Component } from \"react\";\nclass PreviewWindow extends Component {\n  state = {};\n  render() {\n    let fullScreen = this.props.fullScreen ? this.props.fullScreen : null;\n    return (\n      <div className={`preview-window border-shadow-black ${fullScreen}`}>\n        <div className=\"window-title\">\n          <div className=\"window-title-logo\">\n            <i className=\"fa fa-fire\" />\n            <h1>Previewer</h1>\n          </div>\n          <div className=\"window-title-arrows\">\n            <i\n              id=\"arrow-preview\"\n              className=\"fa fa-arrows-alt\"\n              onClick={e => this.props.arrowHandler(e)}\n            />\n          </div>\n        </div>\n        <div\n          id=\"preview\"\n          className=\"parsed-input\"\n          dangerouslySetInnerHTML={{\n            __html: this.props.parsedInput && this.props.parsedInput\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PreviewWindow;\n","import React, { Component } from \"react\";\nimport \"./App.sass\";\nimport CodeInput from \"./CodeInput\";\nimport PreviewWindow from \"./PreviewWindow\";\nimport marked from \"marked\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // inputValue:\n      //   '<h1>Header</h1>\\n <h2>Sub-header</h2>\\n <a href=\"www.realmadryt.pl\">Anchor</a>\\n <code>Inline Code</code>\\n <code>``multicode``</code>\\n <li>List item</li>\\n <blockquote>blockquote</blockquote>\\n <img href =\"../public/favicon.ico\" />\\n <strong>bolded</strong> ',\n      inputValue:\n        \"# Heading\\n## Sub-heading\\n\\n[This is a link.](https://www.freecodecamp.org)\\n\\n`This is inline code.`\\n\\n```\\nThis is a code block.\\n```\\n\\nThis is a list:\\n* item 1\\n* item 2\\n* item 3\\n\\n> This is a blockquote.\\n\\n![Free Code Camp logo](https://dl.dropbox.com/s/lei6k4qqrvo23qb/freeCodeCamp-alternative.png)\\n\\n**This is bolded text.** aaa     \",\n      parsedInput: \"\",\n      fullScreen: \"\"\n    };\n    this.handleTextareaInput = this.handleTextareaInput.bind(this);\n    this.handleArrowClick = this.handleArrowClick.bind(this);\n  }\n  componentDidMount() {\n    this.setState({ parsedInput: marked(this.state.inputValue) });\n  }\n  handleTextareaInput(input) {\n    const parsed = marked(String(input));\n    this.setState({ parsedInput: parsed });\n  }\n  handleArrowClick(input) {\n    if (!this.state.fullScreen) {\n      this.setState({ fullScreen: input.target.id });\n    } else {\n      this.setState({ fullScreen: \"\" });\n    }\n  }\n\n  render() {\n    if (!this.state.fullScreen) {\n      return (\n        <main className=\"app\">\n          <CodeInput\n            arrowHandler={this.handleArrowClick}\n            defaultValue={this.state.inputValue}\n            inputHandler={this.handleTextareaInput}\n          />\n          <PreviewWindow\n            arrowHandler={this.handleArrowClick}\n            parsedInput={this.state.parsedInput}\n          />\n        </main>\n      );\n    } else if (this.state.fullScreen === \"arrow-input\") {\n      return (\n        <main className=\"app\">\n          <CodeInput\n            fullScreen=\"full-screen\"\n            arrowHandler={this.handleArrowClick}\n            defaultValue={this.state.inputValue}\n            inputHandler={this.handleTextareaInput}\n          />\n        </main>\n      );\n    } else if (this.state.fullScreen === \"arrow-preview\") {\n      return (\n        <main className=\"app\">\n          <PreviewWindow\n            fullScreen=\"full-screen\"\n            arrowHandler={this.handleArrowClick}\n            parsedInput={this.state.parsedInput}\n          />\n        </main>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}